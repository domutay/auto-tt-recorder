# Copyright (C) 2022 luckytyphlosion
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# -*- coding: utf-8 -*-
vehicle_names = {
    0x00: "Standard Kart S",
    0x01: "Standard Kart M",
    0x02: "Standard Kart L",
    0x03: "Booster Seat",
    0x04: "Classic Dragster",
    0x05: "Offroader",
    0x06: "Mini Beast",
    0x07: "Wild Wing",
    0x08: "Flame Flyer",
    0x09: "Cheep Charger",
    0x0A: "Super Blooper",
    0x0B: "Piranha Prowler",
    0x0C: "Tiny Titan",
    0x0D: "Daytripper",
    0x0E: "Jetsetter",
    0x0F: "Blue Falcon",
    0x10: "Sprinter",
    0x11: "Honeycoupe",
    0x12: "Standard Bike S",
    0x13: "Standard Bike M",
    0x14: "Standard Bike L",
    0x15: "Bullet Bike",
    0x16: "Mach Bike",
    0x17: "Flame Runner",
    0x18: "Bit Bike",
    0x19: "Sugarscoot",
    0x1A: "Wario Bike",
    0x1B: "Quacker",
    0x1C: "Zip Zip",
    0x1D: "Shooting Star",
    0x1E: "Magikruiser",
    0x1F: "Sneakster",
    0x20: "Spear",
    0x21: "Jet Bubble",
    0x22: "Dolphin Dasher",
    0x23: "Phantom"
}

vehicle_ids_by_filter_name = {vehicle_name.lower().replace(" ", "-"): vehicle_id for vehicle_id, vehicle_name in vehicle_names.items()}

vehicle_names_eu = {
    0x03: "Baby Booster",
    0x04: "Nostalgia 1",
    0x06: "Concerto",
    0x0A: "Turbo Blooper",
    0x0C: "Rally Romper",
    0x0D: "Royal Racer",
    0x0E: "Aero Glider",
    0x10: "B Dasher Mk 2",
    0x11: "Dragonetti",
    0x17: "Bowser Bike",
    0x18: "Nanobike",
    0x19: "Bon Bon",
    0x1C: "Rapide",
    0x1D: "Twinkle Star",
    0x1F: "Nitrocycle",
    0x20: "Torpedo",
    0x21: "Bubble Bike",
}

track_names_eu = {
    6: "DK's Snowboard Cross"
}

NUM_VEHICLES = len(vehicle_names)

track_id_to_ghost_slot = {
    0x00: 4, 0x01: 1, 0x02: 2, 0x03: 10, 0x04: 3, 0x05: 5, 0x06: 6, 0x07: 7,
    0x08: 0, 0x09: 8, 0x0a: 12, 0x0b: 11, 0x0c: 14, 0x0d: 15, 0x0e: 13, 0x0f: 9,
    0x10: 24, 0x11: 25, 0x12: 26, 0x13: 27, 0x14: 28, 0x15: 29, 0x16: 30, 0x17: 31,
    0x18: 18, 0x19: 17, 0x1a: 21, 0x1b: 20, 0x1c: 23, 0x1d: 22, 0x1e: 19, 0x1f: 16
}

track_id_to_human_track_id = {
    0x00: 4, 0x01: 1, 0x02: 2, 0x03: 11,
    0x04: 3, 0x05: 5, 0x06: 6, 0x07: 7,
    0x08: 0, 0x09: 8, 0x0a: 13, 0x0b: 10,
    0x0c: 14, 0x0d: 15, 0x0e: 12, 0x0f: 9,
    0x10: 16, 0x11: 27, 0x12: 23, 0x13: 30,
    0x14: 17, 0x15: 24, 0x16: 29, 0x17: 22,
    0x18: 28, 0x19: 18, 0x1a: 19, 0x1b: 20,
    0x1c: 31, 0x1d: 26, 0x1e: 25, 0x1f: 21,
}

track_names = [
    "Luigi Circuit",
    "Moo Moo Meadows",
    "Mushroom Gorge",
    "Toad's Factory",
    "Mario Circuit",
    "Coconut Mall",
    "DK Summit",
    "Wario's Gold Mine",
    "Daisy Circuit",
    "Koopa Cape",
    "Maple Treeway",
    "Grumble Volcano",
    "Dry Dry Ruins",
    "Moonview Highway",
    "Bowser's Castle",
    "Rainbow Road",
    "GCN Peach Beach",
    "DS Yoshi Falls",
    "SNES Ghost Valley 2",
    "N64 Mario Raceway",
    "N64 Sherbet Land",
    "GBA Shy Guy Beach",
    "DS Delfino Square",
    "GCN Waluigi Stadium",
    "DS Desert Hills",
    "GBA Bowser Castle 3",
    "N64 DK's Jungle Parkway",
    "GCN Mario Circuit",
    "SNES Mario Circuit 3",
    "DS Peach Gardens",
    "GCN DK Mountain",
    "N64 Bowser's Castle"
]

MARIO_CIRCUIT_MSG_ID = 0x2454
MY_GHOST_MSG_ID = 0x1398
GHOST_CREATED_FOR_PLAYER_MSG_ID = 0x045B

track_filenames = [
    "beginner_course.szs",
    "farm_course.szs",
    "kinoko_course.szs",
    "factory_course.szs",
    "castle_course.szs",
    "shopping_course.szs",
    "boardcross_course.szs",
    "truck_course.szs",
    "senior_course.szs",
    "water_course.szs",
    "treehouse_course.szs",
    "volcano_course.szs",
    "desert_course.szs",
    "ridgehighway_course.szs",
    "koopa_course.szs",
    "rainbow_course.szs",
    "old_peach_gc.szs",
    "old_falls_ds.szs",
    "old_obake_sfc.szs",
    "old_mario_64.szs",
    "old_sherbet_64.szs",
    "old_heyho_gba.szs",
    "old_town_ds.szs",
    "old_waluigi_gc.szs",
    "old_desert_ds.szs",
    "old_koopa_gba.szs",
    "old_donkey_64.szs",
    "old_mario_gc.szs",
    "old_mario_sfc.szs",
    "old_garden_ds.szs",
    "old_donkey_gc.szs",
    "old_koopa_64.szs"
]

category_names = {
    -1: "(Default)",
    0: "Normal",
    1: "Glitch",
    2: "No-shortcut",
    16: "Shortcut"
}

location_names = {
    1: "Japan",
    8: "Anguilla",
    9: "Antigua and Barbuda",
    10: "Argentina",
    11: "Aruba",
    12: "Bahamas",
    13: "Barbados",
    14: "Belize",
    15: "Bolivia",
    16: "Brazil",
    17: "British Virgin Islands",
    18: "Canada",
    19: "Cayman Islands",
    20: "Chile",
    21: "Colombia",
    22: "Costa Rica",
    23: "Dominica",
    24: "Dominican Republic",
    25: "Ecuador",
    26: "El Salvador",
    27: "French Guiana",
    28: "Grenada",
    29: "Guadeloupe",
    30: "Guatemala",
    31: "Guyana",
    32: "Haiti",
    33: "Honduras",
    34: "Jamaica",
    35: "Martinique",
    36: "Mexico",
    37: "Monsterrat",
    38: "Netherlands Antilles",
    39: "Nicaragua",
    40: "Panama",
    41: "Paraguay",
    42: "Peru",
    43: "St. Kitts and Nevis",
    44: "St. Lucia",
    45: "St. Vincent and the Grenadines",
    46: "Suriname",
    47: "Trinidad and Tobago",
    48: "Turks and Caicos Islands",
    49: "United States",
    50: "Uruguay",
    51: "US Virgin Islands",
    52: "Venezuela",
    64: "Albania",
    65: "Australia",
    66: "Austria",
    67: "Belgium",
    68: "Bosnia and Herzegovina",
    69: "Botswana",
    70: "Bulgaria",
    71: "Croatia",
    72: "Cyprus",
    73: "Czech Republic",
    74: "Denmark",
    75: "Estonia",
    76: "Finland",
    77: "France",
    78: "Germany",
    79: "Greece",
    80: "Hungary",
    81: "Iceland",
    82: "Ireland",
    83: "Italy",
    84: "Latvia",
    85: "Lesotho",
    86: "Lichtenstein",
    87: "Lithuania",
    88: "Luxembourg",
    89: "F.Y.R of Macedonia",
    90: "Malta",
    91: "Montenegro",
    92: "Mozambique",
    93: "Namibia",
    94: "Netherlands",
    95: "New Zealand",
    96: "Norway",
    97: "Poland",
    98: "Portugal",
    99: "Romania",
    100: "Russia",
    101: "Serbia",
    102: "Slovakia",
    103: "Slovenia",
    104: "South Africa",
    105: "Spain",
    106: "Swaziland",
    107: "Sweden",
    108: "Switzerland",
    109: "Turkey",
    110: "United Kingdom",
    111: "Zambia",
    112: "Zimbabwe",
    113: "Azerbaijan",
    114: "Mauritania (Islamic Republic of Mauritania)",
    115: "Mali (Republic of Mali)",
    116: "Niger (Republic of Niger)",
    117: "Chad (Republic of Chad)",
    118: "Sudan (Republic of the Sudan)",
    119: "Eritrea (State of Eritrea)",
    120: "Djibouti (Republic of Djibouti)",
    121: "Somalia (Somali Republic)",
    128: "Taiwan",
    136: "South Korea",
    144: "Hong Kong",
    145: "Macao",
    152: "Indonesia",
    153: "Singapore",
    154: "Thailand",
    155: "Philippines",
    156: "Malaysia",
    160: "China",
    168: "U.A.E.",
    169: "India",
    170: "Egypt",
    171: "Oman",
    172: "Qatar",
    173: "Kuwait",
    174: "Saudi Arabia",
    175: "Syria",
    176: "Bahrain",
    177: "Jordan",
}

extended_symbols_to_utf8 = {
    0xE000: "‚í∂",
    0xE001: "‚í∑",
    0xE002: "‚ìç",
    0xE003: "‚ìé",
    0xE004: "‚ìÅ",
    0xE005: "‚ìá",
    0xE006: "‚úú",
    0xE007: "‚è∞",
    0xE008: "‚ò∫",
    0xE009: "üò£",
    0xE00A: "‚òπ",
    0xE00B: "üòê",
    0xE00C: "‚òÄ",
    0xE00D: "‚òÅ",
    0xE00E: "‚òÇ",
    0xE00F: "‚òÉ",
    0xE010: "‚ö†",
    0xE011: "?",
    0xE012: "‚úâ",
    0xE013: "üì±",
    0xE014: "‚ñ£",
    0xE015: "‚ô†",
    0xE016: "‚ô¶",
    0xE017: "‚ô•",
    0xE018: "‚ô£",
    0xE019: "‚Üí",
    0xE01A: "‚Üê",
    0xE01B: "‚Üë",
    0xE01C: "‚Üì",
    0xE028: "‚ï≥",
    0xE068: "·µâ",
    0xE069: "·µâ",
    0xE06A: "·µâ",
    0xE06B: "ÔøΩ",
    0xF000: "ÔøΩ",
    0xF030: "‚ë°",
    0xF031: "‚ë°",
    0xF034: "‚í∂",
    0xF035: "‚í∂",
    0xF038: "‚ìê",
    0xF039: "‚ìê",
    0xF03C: "‚í∂",
    0xF03D: "‚í∂",
    0xF041: "‚í∑",
    0xF043: "‚ë†",
    0xF044: "‚äï",
    0xF047: "‚äï",
    0xF050: "‚ìë",
    0xF058: "‚í∑",
    0xF05E: "‚ì¢",
    0xF05F: "‚ì¢",
    0xF060: " ",
    0xF061: "‚òÖ",
    0xF062: "‚ç£",
    0xF063: "‚ÅÇ",
    0xF064: "‚ò∏",
    0xF065: "‚çü",
    0xF066: "‚ç£",
    0xF067: "‚ÅÇ",
    0xF068: "$",
    0xF069: "üéà",
    0xF06A: "üèÜ",
    0xF06B: "üèÜ",
    0xF06C: "üèÜ",
    0xF06D: "üëë",
    0xF074: "‚ò∏",
    0xF075: "‚çü",
    0xF076: "‚ç£",
    0xF077: "‚ÅÇ",
    0xF078: "ùî∏",
    0xF079: "ùîπ",
    0xF07A: "‚ÑÇ",
    0xF07B: "ùîª",
    0xF07C: "ùîº",
    0xF102: " ",
    0xF103: "‚ì™",
    0xF107: "?",
    0xF108: "‚ë†",
    0xF109: "‚ë°",
    0xF10A: "‚ë¢",
    0xF10B: "‚ë£",
    0xF10C: "‚ë†",
    0xF10D: "‚ë°",
    0xF10E: "‚ë¢",
    0xF10F: "‚ë£",
    0xF110: "‚ë†",
    0xF111: "‚ë°",
    0xF112: "‚ë¢",
    0xF113: "‚ë£",
    0xF114: "‚ë†",
    0xF115: "‚ë°",
    0xF116: "‚ë¢",
    0xF117: "‚ë£",
    0xF118: "‚ë†",
    0xF119: "‚ë°",
    0xF11A: "‚ë¢",
    0xF11B: "‚ë£",
    0xF11C: "‚ë†",
    0xF11D: "‚ë°",
    0xF11E: "‚ë¢",
    0xF11F: "‚ë£",
    0xF120: "‚ë†",
    0xF121: "‚ë°",
    0xF122: "‚ë¢",
    0xF123: "‚ë£",
    0xF124: "‚ë†",
    0xF125: "‚ë°",
    0xF126: "‚ë¢",
    0xF127: "‚ë£",
    0xF128: "‚ë†",
    0xF129: "‚ë°",
    0xF12A: "‚ë¢",
    0xF12B: "‚ë£",
    0xF12C: "‚ë†",
    0xF12D: "‚ë°",
    0xF12E: "‚ë¢",
    0xF12F: "‚ë£",
    0x2460: "Ôºê",
    0x2461: "Ôºë",
    0x2462: "Ôºí",
    0x2463: "Ôºì",
    0x2464: "Ôºî",
    0x2465: "Ôºï",
    0x2466: "Ôºñ",
    0x2467: "Ôºó",
    0x2468: "Ôºò",
    0x2469: "Ôºô",
    0x246A: "Ôºö",
    0x246B: "Ôºé",
    0x246C: "Ôºè",
    0x246D: "Ôºç",
    0x246E: "Ôºã"
}

def replace_extended_symbols(input_str):
    output = []

    for c in input_str:
        replacement = extended_symbols_to_utf8.get(ord(c))
        if replacement is None:
            output.append(c)
        else:
            output.append(replacement)

    return "".join(output)

controller_names = {
    0: "Wii Wheel",
    1: "Nunchuk",
    2: "Classic",
    3: "GameCube",
    15: "???"
}

def get_controller_name(controller_id, is_usb_gcn):
    if is_usb_gcn and controller_id == 3:
        return "USB GameCube"
    else:
        return controller_names[controller_id]

def get_track_name_from_track_id(track_id):
    return track_names[track_id_to_human_track_id[track_id]]
